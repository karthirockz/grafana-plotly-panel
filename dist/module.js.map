{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./module.ts","webpack:///./SeriesWrapper.ts","webpack:///./editor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","_sdk","a","_SeriesWrapper","_editor","Plotly","e","setPrototypeOf","__proto__","Array","this","constructor","PlotlyPanelCtrl","_super","$scope","$injector","$window","$rootScope","uiSegmentSrv","_this","seriesByKey","Map","seriesHash","deepCopyWithTemplates","obj","_lodash2","isArray","map","val","isString","templateSrv","replace","panel","scopedVars","isObject","copy_1","forEach","v","k","initalized","defaultsDeep","defaults","cfg","pconfig","traces","events","on","onInitEditMode","onRender","onDataReceived","onDataError","onPanelInitalized","onResize","onDataSnapshotLoad","__extends","$inject","getCssRule","selectorText","styleSheets","document","idx","length","rules","cssRules","ruleIdx","rule","setTimeout","graphDiv","layout","window","getComputedStyle","display","rect","getBoundingClientRect","width","height","redraw","console","warn","err","log","onRefresh","otherPanelInFullscreenMode","editor","EditorHelper","addEditorTab","onConfigChanged","processConfigMigration","configVersion","plot_bgcolor","paper_bgcolor","autosize","margin","scene","is3d","zaxis","settings","old","show_1","markers","indexOf","lines","trace","show","version","_updateTraceData","getProcessedLayout","xaxis","yaxis","title","b","pad","labelStyle","color","style","font","_jquery2","parse","scale","toString","gridcolor","options","showLink","displaylogo","displayModeBar","modeBarButtonsToRemove","react","data","points","pointNumber","ts","msg","x","toPrecision","y","appEvent","dashboard","formatDate","_moment2","min","Number","MAX_SAFE_INTEGER","max","MIN_SAFE_INTEGER","Math","range","from","utc","to","timeSrv","setTime","Plots","purge","innerHTML","snapshot","dataList","finfo","series","sidx","refId","targets","String","fromCharCode","charCodeAt","columns","push","SeriesWrapperTable","target","SeriesWrapperSeries","error","clear","getRelativeKey","set","getNamedKeys","hchanged","updateMappings","selectTrace","traceIndex","render","__addCopyPath","path","__set","dataWarnings","_updateTracesFromConfigs","cloneDeep","defaultTrace","is3D","tconfig","config","mapping","createTraceName","type","marker","sizemin","sizemode","sizeref","color_option","colorscale","showscale","line","text","z","substring","refresh","force","toArray","link","scope","elem","attrs","ctrl","find","evt","mouse","templateUrl","size","dash","shape","symbol","showlegend","legend","orientation","dragmode","hovermode","family","showgrid","zeroline","rangemode","MetricsPanelCtrl","SeriesWrapper","setFirst","first","isNumber","_typeof","count","datapoints","arr","table","index","rows","col","row","_module","axis","defaultMappins","time","changed","onUpdateAxis","label","segment","deepClone","newSegment","opts","fake","createTrace","removeCurrentTrace","splice","getSeriesSegs","withRemove","Promise","resolve","reject","onAxisSeriesChanged","onTextMetricChanged","seg","onColorChanged","onSymbolChanged","getSymbolSegs","segs"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","///<reference path=\"../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\r\n\r\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\r\n\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport $ from 'jquery';\r\n\r\nimport {SeriesWrapper, SeriesWrapperSeries, SeriesWrapperTable} from './SeriesWrapper';\r\nimport {EditorHelper} from './editor';\r\n\r\nimport * as Plotly from './lib/plotly.min';\r\n\r\nclass PlotlyPanelCtrl extends MetricsPanelCtrl {\r\n  static templateUrl = 'partials/module.html';\r\n  static configVersion = 1; // An index to help config migration\r\n\r\n  initalized: boolean;\r\n  //$tooltip: any;\r\n\r\n  static defaultTrace = {\r\n    mapping: {\r\n      x: null,\r\n      y: null,\r\n      z: null,\r\n      text: null,\r\n      color: null,\r\n      size: null,\r\n    },\r\n    show: {\r\n      line: true,\r\n      markers: true,\r\n    },\r\n    settings: {\r\n      line: {\r\n        color: '#005f81',\r\n        width: 6,\r\n        dash: 'solid',\r\n        shape: 'linear',\r\n      },\r\n      marker: {\r\n        size: 15,\r\n        symbol: 'circle',\r\n        color: '#33B5E5',\r\n        colorscale: 'YIOrRd',\r\n        sizemode: 'diameter',\r\n        sizemin: 3,\r\n        sizeref: 0.2,\r\n        line: {\r\n          color: '#DDD',\r\n          width: 0,\r\n        },\r\n        showscale: true,\r\n      },\r\n      color_option: 'ramp',\r\n    },\r\n  };\r\n  static defaults = {\r\n    pconfig: {\r\n      traces: [PlotlyPanelCtrl.defaultTrace],\r\n      settings: {\r\n        type: 'scatter',\r\n        displayModeBar: false,\r\n      },\r\n      layout: {\r\n        showlegend: false,\r\n        legend: {\r\n          orientation: 'h',\r\n        },\r\n        dragmode: 'lasso', // (enumerated: \"zoom\" | \"pan\" | \"select\" | \"lasso\" | \"orbit\" | \"turntable\" )\r\n        hovermode: 'closest',\r\n        font: {\r\n          family: '\"Open Sans\", Helvetica, Arial, sans-serif',\r\n        },\r\n        xaxis: {\r\n          showgrid: true,\r\n          zeroline: false,\r\n          type: 'linear',\r\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" )\r\n        },\r\n        yaxis: {\r\n          showgrid: true,\r\n          zeroline: false,\r\n          type: 'linear',\r\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" )\r\n        },\r\n        zaxis: {\r\n          showgrid: true,\r\n          zeroline: false,\r\n          type: 'linear',\r\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" )\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  graphDiv: any;\r\n  series: SeriesWrapper[];\r\n  seriesByKey: Map<string, SeriesWrapper> = new Map();\r\n  seriesHash: string = '?';\r\n\r\n  traces: Array<any>; // The data sent directly to Plotly -- with a special __copy element\r\n  layout: any; // The layout used by Plotly\r\n\r\n  mouse: any;\r\n  cfg: any;\r\n\r\n  // For editor\r\n  editor: EditorHelper;\r\n  dataWarnings: string[]; // warnings about loading data\r\n\r\n  /** @ngInject **/\r\n  constructor($scope, $injector, $window, private $rootScope, public uiSegmentSrv) {\r\n    super($scope, $injector);\r\n\r\n    this.initalized = false;\r\n\r\n    //this.$tooltip = $('<div id=\"tooltip\" class=\"graph-tooltip\">');\r\n\r\n    // defaults configs\r\n    _.defaultsDeep(this.panel, PlotlyPanelCtrl.defaults);\r\n\r\n    this.cfg = this.panel.pconfig;\r\n\r\n    this.traces = [];\r\n\r\n    // ?? This seems needed for tests?!!\r\n    if (!this.events) {\r\n      return;\r\n    }\r\n\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n    this.events.on('render', this.onRender.bind(this));\r\n    this.events.on('data-received', this.onDataReceived.bind(this));\r\n    this.events.on('data-error', this.onDataError.bind(this));\r\n    this.events.on('panel-initialized', this.onPanelInitalized.bind(this));\r\n    this.events.on('panel-size-changed', this.onResize.bind(this));\r\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\r\n    this.events.on('refresh', this.onRefresh.bind(this));\r\n  }\r\n\r\n  getCssRule(selectorText): CSSStyleRule | null {\r\n    const styleSheets = document.styleSheets;\r\n    for (let idx = 0; idx < styleSheets.length; idx += 1) {\r\n      const styleSheet = styleSheets[idx] as CSSStyleSheet;\r\n      const rules = styleSheet.cssRules;\r\n      for (let ruleIdx = 0; ruleIdx < rules.length; ruleIdx += 1) {\r\n        const rule = rules[ruleIdx] as CSSStyleRule;\r\n        if (rule.selectorText === selectorText) {\r\n          return rule;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  onResize() {\r\n    setTimeout(() => {\r\n      if (this.graphDiv && this.layout) {\r\n        // https://github.com/alonho/angular-plotly/issues/26\r\n        let e = window.getComputedStyle(this.graphDiv).display;\r\n        if (!e || 'none' === e) {\r\n          // not drawn!\r\n          console.warn('resize a plot that is not drawn yet');\r\n        } else {\r\n          let rect = this.graphDiv.getBoundingClientRect();\r\n          this.layout.width = rect.width;\r\n          this.layout.height = this.height;\r\n          Plotly.redraw(this.graphDiv);\r\n        }\r\n      }\r\n    }, 75);\r\n  }\r\n\r\n  onDataError(err) {\r\n    console.log('onDataError', err);\r\n  }\r\n\r\n  onRefresh() {\r\n    // ignore fetching data if another panel is in fullscreen\r\n    if (this.otherPanelInFullscreenMode()) {\r\n      return;\r\n    }\r\n\r\n    if (this.graphDiv && this.initalized) {\r\n      Plotly.redraw(this.graphDiv);\r\n    }\r\n  }\r\n\r\n  onInitEditMode() {\r\n    this.editor = new EditorHelper(this);\r\n    this.addEditorTab(\r\n      'Display',\r\n      'public/plugins/natel-plotly-panel/partials/tab_display.html',\r\n      2\r\n    );\r\n    this.addEditorTab(\r\n      'Traces',\r\n      'public/plugins/natel-plotly-panel/partials/tab_traces.html',\r\n      3\r\n    );\r\n    //  this.editorTabIndex = 1;\r\n    this.onConfigChanged(); // Sets up the axis info\r\n    this.onResize();\r\n  }\r\n\r\n  processConfigMigration() {\r\n    console.log(\r\n      'Migrating Plotly Configuration to version: ' + PlotlyPanelCtrl.configVersion\r\n    );\r\n\r\n    // Remove some things that should not be saved\r\n    let cfg = this.panel.pconfig;\r\n    delete cfg.layout.plot_bgcolor;\r\n    delete cfg.layout.paper_bgcolor;\r\n    delete cfg.layout.autosize;\r\n    delete cfg.layout.height;\r\n    delete cfg.layout.width;\r\n    delete cfg.layout.margin;\r\n    delete cfg.layout.scene;\r\n    if (!this.is3d()) {\r\n      delete cfg.layout.zaxis;\r\n    }\r\n\r\n    // Move from 'markers-lines' to checkbox\r\n    if (cfg.settings.mode) {\r\n      const old = cfg.settings.mode;\r\n      const show = {\r\n        markers: old.indexOf('markers') >= 0,\r\n        lines: old.indexOf('lines') >= 0,\r\n      };\r\n      _.forEach(cfg.traces, trace => {\r\n        trace.show = show;\r\n      });\r\n      delete cfg.settings.mode;\r\n    }\r\n\r\n    // TODO... MORE Migrations\r\n    console.log('After Migration:', cfg);\r\n    this.cfg = cfg;\r\n    this.panel.version = PlotlyPanelCtrl.configVersion;\r\n  }\r\n\r\n  onPanelInitalized() {\r\n    if (!this.panel.version || PlotlyPanelCtrl.configVersion > this.panel.version) {\r\n      this.processConfigMigration();\r\n    }\r\n    this._updateTraceData(true);\r\n  }\r\n\r\n  deepCopyWithTemplates = obj => {\r\n    if (_.isArray(obj)) {\r\n      return obj.map(val => this.deepCopyWithTemplates(val));\r\n    } else if (_.isString(obj)) {\r\n      return this.templateSrv.replace(obj, this.panel.scopedVars);\r\n    } else if (_.isObject(obj)) {\r\n      let copy = {};\r\n      _.forEach(obj, (v, k) => {\r\n        copy[k] = this.deepCopyWithTemplates(v);\r\n      });\r\n      return copy;\r\n    }\r\n    return obj;\r\n  };\r\n\r\n  getProcessedLayout() {\r\n    // Copy from config\r\n    let layout = this.deepCopyWithTemplates(this.cfg.layout);\r\n    layout.plot_bgcolor = 'transparent';\r\n    layout.paper_bgcolor = layout.plot_bgcolor;\r\n\r\n    // Update the size\r\n    let rect = this.graphDiv.getBoundingClientRect();\r\n    layout.autosize = false; // height is from the div\r\n    layout.height = this.height;\r\n    layout.width = rect.width;\r\n\r\n    // Make sure it is something\r\n    if (!layout.xaxis) layout.xaxis = {};\r\n    if (!layout.yaxis) layout.yaxis = {};\r\n\r\n    if (this.is3d()) {\r\n      if (!layout.zaxis) layout.zaxis = {};\r\n\r\n      layout.scene.xaxis.title = layout.xaxis.title;\r\n      layout.scene.yaxis.title = layout.yaxis.title;\r\n      layout.scene.zaxis.title = layout.zaxis.title;\r\n      layout.margin = {\r\n        l: 0,\r\n        r: 0,\r\n        t: 0,\r\n        b: 5,\r\n        pad: 0,\r\n      };\r\n    } else {\r\n      delete layout.zaxis;\r\n      delete layout.scene;\r\n      layout.margin = {\r\n        l: layout.yaxis.title ? 50 : 35,\r\n        r: 5,\r\n        t: 0,\r\n        b: layout.xaxis.title ? 65 : 30,\r\n        pad: 2,\r\n      };\r\n\r\n      // get the css rule of grafana graph axis text\r\n      const labelStyle = this.getCssRule('div.flot-text');\r\n      if (labelStyle) {\r\n        let color = labelStyle.style.color;\r\n        if (!layout.font) layout.font = {};\r\n        layout.font.color = color;\r\n\r\n        // make the grid a little more transparent\r\n        color = $.color\r\n          .parse(color)\r\n          .scale('a', 0.22)\r\n          .toString();\r\n\r\n        // set gridcolor (like grafana graph)\r\n        layout.xaxis.gridcolor = color;\r\n        layout.yaxis.gridcolor = color;\r\n      }\r\n    }\r\n    return layout;\r\n  }\r\n\r\n  onRender() {\r\n    // ignore fetching data if another panel is in fullscreen\r\n    if (this.otherPanelInFullscreenMode() || !this.graphDiv) {\r\n      return;\r\n    }\r\n\r\n    if (!this.initalized) {\r\n      let s = this.cfg.settings;\r\n\r\n      let options = {\r\n        showLink: false,\r\n        displaylogo: false,\r\n        displayModeBar: s.displayModeBar,\r\n        modeBarButtonsToRemove: ['sendDataToCloud'], //, 'select2d', 'lasso2d']\r\n      };\r\n\r\n      this.layout = this.getProcessedLayout();\r\n\r\n      Plotly.react(this.graphDiv, this.traces, this.layout, options);\r\n\r\n      this.graphDiv.on('plotly_click', data => {\r\n        if (data === undefined || data.points === undefined) {\r\n          return;\r\n        }\r\n        for (let i = 0; i < data.points.length; i++) {\r\n          let idx = data.points[i].pointNumber;\r\n          let ts = this.traces[0].ts[idx];\r\n          // console.log( 'CLICK!!!', ts, data );\r\n          let msg =\r\n            data.points[i].x.toPrecision(4) + ', ' + data.points[i].y.toPrecision(4);\r\n          this.$rootScope.appEvent('alert-success', [\r\n            msg,\r\n            '@ ' + this.dashboard.formatDate(moment(ts)),\r\n          ]);\r\n        }\r\n      });\r\n\r\n      // if(false) {\r\n      //   this.graph.on('plotly_hover', (data, xxx) => {\r\n      //     console.log( 'HOVER!!!', data, xxx, this.mouse );\r\n      //     if(data.points.length>0) {\r\n      //       var idx = 0;\r\n      //       var pt = data.points[idx];\r\n\r\n      //       var body = '<div class=\"graph-tooltip-time\">'+ pt.pointNumber +'</div>';\r\n      //       body += \"<center>\";\r\n      //       body += pt.x + ', '+pt.y;\r\n      //       body += \"</center>\";\r\n\r\n      //       this.$tooltip.html( body ).place_tt( this.mouse.pageX + 10, this.mouse.pageY );\r\n      //     }\r\n      //   }).on('plotly_unhover', (data) => {\r\n      //     this.$tooltip.detach();\r\n      //   });\r\n      // }\r\n\r\n      this.graphDiv.on('plotly_selected', data => {\r\n        if (data === undefined || data.points === undefined) {\r\n          return;\r\n        }\r\n\r\n        if (data.points.length === 0) {\r\n          console.log('Nothing Selected', data);\r\n          return;\r\n        }\r\n\r\n        console.log('SELECTED', data);\r\n\r\n        let min = Number.MAX_SAFE_INTEGER;\r\n        let max = Number.MIN_SAFE_INTEGER;\r\n\r\n        for (let i = 0; i < data.points.length; i++) {\r\n          let idx = data.points[i].pointNumber;\r\n          let ts = this.traces[0].ts[idx];\r\n          min = Math.min(min, ts);\r\n          max = Math.max(max, ts);\r\n        }\r\n\r\n        // At least 2 seconds\r\n        min -= 1000;\r\n        max += 1000;\r\n\r\n        let range = {from: moment.utc(min), to: moment.utc(max)};\r\n\r\n        console.log('SELECTED!!!', min, max, data.points.length, range);\r\n\r\n        this.timeSrv.setTime(range);\r\n\r\n        // rebuild the graph after query\r\n        if (this.graphDiv) {\r\n          Plotly.Plots.purge(this.graphDiv);\r\n          this.graphDiv.innerHTML = '';\r\n          this.initalized = false;\r\n        }\r\n      });\r\n    } else {\r\n      Plotly.redraw(this.graphDiv);\r\n    }\r\n    this.initalized = true;\r\n  }\r\n\r\n  onDataSnapshotLoad(snapshot) {\r\n    this.onDataReceived(snapshot);\r\n  }\r\n\r\n  onDataReceived(dataList) {\r\n    let finfo: SeriesWrapper[] = [];\r\n    let seriesHash = '/';\r\n    dataList.forEach((series, sidx) => {\r\n      let refId = _.get(this.panel, 'targets[' + sidx + '].refId');\r\n      if (!refId) {\r\n        console.log('Missing Targets: ', this.panel.targets);\r\n        refId = String.fromCharCode('A'.charCodeAt(0) + sidx);\r\n      }\r\n      if (series.columns) {\r\n        for (let i = 0; i < series.columns.length; i++) {\r\n          finfo.push(new SeriesWrapperTable(refId, series, i));\r\n        }\r\n      } else if (series.target) {\r\n        finfo.push(new SeriesWrapperSeries(refId, series, 'value'));\r\n        finfo.push(new SeriesWrapperSeries(refId, series, 'time'));\r\n        finfo.push(new SeriesWrapperSeries(refId, series, 'index'));\r\n      } else {\r\n        console.error('Unsupported Series response', sidx, series);\r\n      }\r\n    });\r\n    this.seriesByKey.clear();\r\n    finfo.forEach(s => {\r\n      const key = s.getRelativeKey();\r\n      this.seriesByKey.set(key, s);\r\n      s.getNamedKeys().forEach(k => {\r\n        this.seriesByKey.set(k, s);\r\n      });\r\n      seriesHash += '$' + key;\r\n    });\r\n    this.series = finfo;\r\n\r\n    // Now Process the loaded data\r\n    const hchanged = this.seriesHash !== seriesHash;\r\n    if (hchanged && EditorHelper.updateMappings(this)) {\r\n      if (this.editor) {\r\n        this.editor.selectTrace(this.editor.traceIndex);\r\n        this.editor.onConfigChanged();\r\n      }\r\n    }\r\n    if (hchanged || !this.initalized) {\r\n      this.onConfigChanged();\r\n      this.seriesHash = seriesHash;\r\n    }\r\n\r\n    // Load the real data changes\r\n    this._updateTraceData();\r\n    this.render();\r\n  }\r\n\r\n  __addCopyPath(trace: any, key: string, path: string): boolean {\r\n    if (key) {\r\n      let s: SeriesWrapper = this.seriesByKey.get(key);\r\n      if (s) {\r\n        trace.__set.push({\r\n          key: s.getRelativeKey(),\r\n          path: path,\r\n        });\r\n        return true;\r\n      }\r\n      this.dataWarnings.push(\r\n        'Unable to find: ' + key + ' for ' + trace.name + ' // ' + path\r\n      );\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // This will update all trace settings *except* the data\r\n  _updateTracesFromConfigs() {\r\n    this.dataWarnings = [];\r\n\r\n    // Make sure we have a trace\r\n    if (this.cfg.traces == null || this.cfg.traces.length < 1) {\r\n      this.cfg.traces = [_.cloneDeep(PlotlyPanelCtrl.defaultTrace)];\r\n    }\r\n\r\n    const is3D = this.is3d();\r\n    this.traces = this.cfg.traces.map((tconfig, idx) => {\r\n      const config = this.deepCopyWithTemplates(tconfig) || {};\r\n      _.defaults(config, PlotlyPanelCtrl.defaults);\r\n      let mapping = config.mapping;\r\n\r\n      let trace: any = {\r\n        name: config.name || EditorHelper.createTraceName(idx),\r\n        type: this.cfg.settings.type,\r\n        mode: 'markers+lines', // really depends on config settings\r\n        __set: [], // { key:? property:? }\r\n      };\r\n\r\n      let mode: string = '';\r\n      if (config.show.markers) {\r\n        mode += '+markers';\r\n        trace.marker = config.settings.marker;\r\n\r\n        delete trace.marker.sizemin;\r\n        delete trace.marker.sizemode;\r\n        delete trace.marker.sizeref;\r\n\r\n        if (config.settings.color_option === 'ramp') {\r\n          this.__addCopyPath(trace, mapping.color, 'marker.color');\r\n        } else {\r\n          delete trace.marker.colorscale;\r\n          delete trace.marker.showscale;\r\n        }\r\n      }\r\n\r\n      if (config.show.lines) {\r\n        mode += '+lines';\r\n        trace.line = config.settings.line;\r\n      }\r\n\r\n      // Set the text\r\n      this.__addCopyPath(trace, mapping.text, 'text');\r\n      this.__addCopyPath(trace, mapping.x, 'x');\r\n      this.__addCopyPath(trace, mapping.y, 'y');\r\n\r\n      if (is3D) {\r\n        this.__addCopyPath(trace, mapping.z, 'z');\r\n      }\r\n\r\n      // Set the trace mode\r\n      if (mode) {\r\n        trace.mode = mode.substring(1);\r\n      }\r\n      return trace;\r\n    });\r\n    console.log('Set-Traces', this.traces);\r\n    this.refresh();\r\n  }\r\n\r\n  // Fills in the required data into the trace values\r\n  _updateTraceData(force: boolean = false) {\r\n    if (!this.series) {\r\n      console.log('NO Series data yet!');\r\n      return;\r\n    }\r\n\r\n    if (force || !this.traces || this.traces.length != this.cfg.traces.length) {\r\n      this._updateTracesFromConfigs();\r\n    }\r\n\r\n    // Update the metric values\r\n    this.traces.forEach(trace => {\r\n      if (trace.__set) {\r\n        trace.__set.forEach(v => {\r\n          const s = this.seriesByKey.get(v.key);\r\n          if (s) {\r\n            _.set(trace, v.path, s.toArray());\r\n          } else {\r\n            console.warn('Can not set', v);\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    //console.log('SetDATA', this.traces);\r\n  }\r\n\r\n  onConfigChanged() {\r\n    // Force reloading the traces\r\n    this._updateTraceData(true);\r\n\r\n    // Updates the layout and redraw\r\n    if (this.initalized && this.graphDiv) {\r\n      let s = this.cfg.settings;\r\n      let options = {\r\n        showLink: false,\r\n        displaylogo: false,\r\n        displayModeBar: s.displayModeBar,\r\n        modeBarButtonsToRemove: ['sendDataToCloud'], //, 'select2d', 'lasso2d']\r\n      };\r\n      this.layout = this.getProcessedLayout();\r\n      console.log('Update-LAYOUT', this.layout, this.traces);\r\n      Plotly.react(this.graphDiv, this.traces, this.layout, options);\r\n    }\r\n\r\n    // Will query and then update metrics\r\n    this.refresh();\r\n  }\r\n\r\n  is3d() {\r\n    return this.cfg.settings.type === 'scatter3d';\r\n  }\r\n\r\n  link(scope, elem, attrs, ctrl) {\r\n    this.graphDiv = elem.find('.plotly-spot')[0];\r\n    this.initalized = false;\r\n    elem.on('mousemove', evt => {\r\n      this.mouse = evt;\r\n    });\r\n\r\n    //let p = $(this.graphDiv).parent().parent()[0];\r\n    //console.log( 'PLOT', this.graphDiv, p );\r\n  }\r\n}\r\n\r\nexport {PlotlyPanelCtrl, PlotlyPanelCtrl as PanelCtrl};\r\n","import _ from 'lodash';\r\n\r\n// This gives a standard way to get a value for a given field\r\nexport abstract class SeriesWrapper {\r\n  refId: string; // From Query Target\r\n  name: string;\r\n\r\n  type?: 'string' | 'date' | 'boolean' | 'epoch' | 'number';\r\n  first?: any;\r\n  count: number;\r\n\r\n  /** @ngInject */\r\n  constructor(refId: string) {\r\n    this.refId = refId;\r\n  }\r\n\r\n  protected setFirst(v: any) {\r\n    this.first = v;\r\n    if (_.isNumber(v)) {\r\n      this.type = 'number';\r\n    } else if (_.isString(v)) {\r\n      this.type = 'string';\r\n    } else if (typeof v === typeof true) {\r\n      this.type = 'boolean';\r\n    }\r\n  }\r\n\r\n  abstract getRelativeKey(): string;\r\n  abstract getNamedKeys(): string[];\r\n\r\n  abstract toArray(): Array<string | number | boolean>;\r\n}\r\n\r\nexport class SeriesWrapperSeries extends SeriesWrapper {\r\n  value: 'value' | 'index' | 'time';\r\n\r\n  /** @ngInject */\r\n  constructor(refId: string, public series: any, val: 'value' | 'index' | 'time') {\r\n    super(refId);\r\n    this.value = val;\r\n    this.count = series.datapoints.length;\r\n    this.name = series.target;\r\n\r\n    if ('index' === val) {\r\n      this.first = 0;\r\n      this.type = 'number';\r\n      this.name += '@index';\r\n      return;\r\n    }\r\n    if ('value' === val) {\r\n      _.forEach(series.datapoints, arr => {\r\n        if (arr[0] !== null) {\r\n          // 0 is an ok value so cant use if(arr[0])\r\n          this.setFirst(arr[0]);\r\n          return false;\r\n        }\r\n        return true; // continue\r\n      });\r\n      return;\r\n    }\r\n    if ('time' === val) {\r\n      this.type = 'epoch';\r\n      this.first = series.datapoints[0][1];\r\n      this.name += '@time';\r\n      return;\r\n    }\r\n  }\r\n\r\n  toArray(): any[] {\r\n    if ('index' == this.value) {\r\n      let arr = new Array(this.count);\r\n      for (let i = 0; i < this.count; i++) {\r\n        arr[i] = i;\r\n      }\r\n      return arr;\r\n    }\r\n    const idx = 'time' === this.value ? 1 : 0;\r\n    return _.map(this.series.datapoints, arr => {\r\n      return arr[idx];\r\n    });\r\n  }\r\n\r\n  getRelativeKey(): string {\r\n    return this.refId + '@' + this.value;\r\n  }\r\n\r\n  getNamedKeys(): string[] {\r\n    return [this.name, this.refId + '/' + this.name];\r\n  }\r\n}\r\n\r\nexport class SeriesWrapperTable extends SeriesWrapper {\r\n  /** @ngInject */\r\n  constructor(refId: string, public table: any, public index: number) {\r\n    super(refId);\r\n    this.count = table.rows.length;\r\n\r\n    const col = table.columns[index];\r\n    if (!col) {\r\n      throw 'Unkonwn Column: ' + index;\r\n    }\r\n\r\n    this.name = col.text;\r\n    if ('time' === col.type) {\r\n      this.type = 'epoch';\r\n      this.first = table.rows[0][index];\r\n    } else {\r\n      for (let i = 0; i < this.count; i++) {\r\n        let v = table.rows[i][index];\r\n        if (v !== null) {\r\n          // 0 is an ok value so cant use if(v)\r\n          this.setFirst(v);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  toArray(): any[] {\r\n    return _.map(this.table.rows, row => {\r\n      return row[this.index];\r\n    });\r\n  }\r\n\r\n  getRelativeKey(): string {\r\n    return this.refId + '/' + this.name;\r\n  }\r\n\r\n  getNamedKeys(): string[] {\r\n    return [this.name, this.refId + '[' + this.index + ']'];\r\n  }\r\n}\r\n","import _ from 'lodash';\r\n\r\nimport {PlotlyPanelCtrl} from './module';\r\n\r\nclass AxisInfo {\r\n  label: string;\r\n  layout: any; // The config saved in layout\r\n  property: string; // mapping property to check in a trace\r\n  segment: any; // The Grafana <metric-segment\r\n}\r\n\r\nexport class EditorHelper {\r\n  axis = new Array<AxisInfo>();\r\n  trace: any; // Trace Config\r\n  traceIndex: number = 0;\r\n  traces: any[]; // array of configs;\r\n\r\n  symbol: any; // The Grafana <metric-segment for this symbol\r\n  mapping: any = {}; // The Grafana <metric-segment for this symbol\r\n\r\n  /** @ngInject */\r\n  constructor(public ctrl: PlotlyPanelCtrl) {\r\n    EditorHelper.updateMappings(ctrl);\r\n    this.selectTrace(0);\r\n  }\r\n\r\n  // Callback when the query results changed\r\n  static updateMappings(ctrl: PlotlyPanelCtrl): boolean {\r\n    if (ctrl.series == null || ctrl.series.length < 1) {\r\n      return false;\r\n    }\r\n\r\n    const defaultMappins = {\r\n      first: ctrl.series[0].getRelativeKey(),\r\n      time: ctrl.series[1].getRelativeKey(),\r\n    };\r\n\r\n    let changed = false;\r\n    ctrl.cfg.traces.forEach(trace => {\r\n      _.defaults(trace, PlotlyPanelCtrl.defaultTrace);\r\n      let mapping = trace.mapping;\r\n      if (!mapping.color) {\r\n        mapping.color = defaultMappins.first;\r\n        changed = true;\r\n      }\r\n      if (!mapping.x) {\r\n        mapping.x = defaultMappins.time;\r\n        changed = true;\r\n      }\r\n      if (!mapping.y) {\r\n        mapping.y = defaultMappins.first;\r\n        changed = true;\r\n      }\r\n      if (ctrl.is3d() && !mapping.z) {\r\n        mapping.z = defaultMappins.first;\r\n        changed = true;\r\n      }\r\n    });\r\n    return changed;\r\n  }\r\n\r\n  onConfigChanged() {\r\n    this.onUpdateAxis(); // Every time????\r\n\r\n    //\r\n    for (let i = 0; i < this.axis.length; i++) {\r\n      if (this.axis[i].layout.rangemode === 'between') {\r\n        if (this.axis[i].layout.range == null) {\r\n          this.axis[i].layout.range = [0, null];\r\n        }\r\n      } else {\r\n        this.axis[i].layout.range = null;\r\n      }\r\n    }\r\n\r\n    this.ctrl.onConfigChanged();\r\n  }\r\n\r\n  onUpdateAxis() {\r\n    let mapping = this.trace.mapping;\r\n    if (!mapping) {\r\n      console.error('Missing mappings for trace', this.trace);\r\n      return;\r\n    }\r\n\r\n    const layout = this.ctrl.cfg.layout;\r\n    if (!layout.xaxis) {\r\n      layout.xaxis = {};\r\n    }\r\n    if (!layout.yaxis) {\r\n      layout.yaxis = {};\r\n    }\r\n\r\n    this.axis = [];\r\n    this.axis.push({\r\n      label: 'X Axis',\r\n      layout: layout.xaxis,\r\n      property: 'x',\r\n      segment: this.mapping.x,\r\n    });\r\n    this.axis.push({\r\n      label: 'Y Axis',\r\n      layout: layout.yaxis,\r\n      property: 'y',\r\n      segment: this.mapping.y,\r\n    });\r\n\r\n    if (this.ctrl.is3d()) {\r\n      if (!layout.zaxis) {\r\n        layout.zaxis = {};\r\n      }\r\n      this.axis.push({\r\n        label: 'Z Axis',\r\n        layout: layout.zaxis,\r\n        property: 'z',\r\n        segment: this.mapping.z,\r\n      });\r\n    }\r\n  }\r\n\r\n  //-----------------------------------------------------------------------\r\n  // Manage Traces\r\n  //-----------------------------------------------------------------------\r\n\r\n  selectTrace(index: number) {\r\n    this.traces = this.ctrl.cfg.traces;\r\n    if (!this.traces || this.traces.length < 1) {\r\n      this.traces = this.ctrl.cfg.traces = [_.deepClone(PlotlyPanelCtrl.defaultTrace)];\r\n    }\r\n    if (index >= this.ctrl.cfg.traces.length) {\r\n      index = this.ctrl.cfg.traces.length - 1;\r\n    }\r\n    this.trace = this.ctrl.cfg.traces[index];\r\n    this.traceIndex = index;\r\n\r\n    _.defaults(this.trace, PlotlyPanelCtrl.defaultTrace);\r\n    if (!this.trace.name) {\r\n      this.trace.name = EditorHelper.createTraceName(index);\r\n    }\r\n\r\n    // The _defaults makes sure this is taken care of\r\n    this.symbol = this.ctrl.uiSegmentSrv.newSegment({\r\n      value: this.trace.settings.marker.symbol,\r\n    });\r\n\r\n    // Now set one for each key\r\n    this.mapping = {};\r\n    _.forEach(this.trace.mapping, (value, key) => {\r\n      if (value) {\r\n        let s = this.ctrl.seriesByKey.get(value);\r\n        let opts: any = {\r\n          value: value,\r\n          series: s,\r\n          fake: s == null,\r\n        };\r\n        this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment(opts);\r\n      } else {\r\n        this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment({\r\n          value: 'Select Metric',\r\n          fake: true,\r\n        });\r\n      }\r\n    });\r\n\r\n    console.log('Editor Info', this);\r\n\r\n    this.onConfigChanged();\r\n    this.ctrl.refresh();\r\n  }\r\n\r\n  createTrace() {\r\n    let trace: any = {};\r\n    if (this.ctrl.cfg.traces.length > 0) {\r\n      trace = _.cloneDeep(this.ctrl.cfg.traces[this.ctrl.cfg.traces.length - 1]);\r\n    } else {\r\n      trace = _.deepClone(PlotlyPanelCtrl.defaultTrace);\r\n    }\r\n    trace.name = EditorHelper.createTraceName(this.ctrl.traces.length);\r\n    this.ctrl.cfg.traces.push(trace);\r\n    this.selectTrace(this.ctrl.cfg.traces.length - 1);\r\n  }\r\n\r\n  removeCurrentTrace() {\r\n    // TODO... better behavior\r\n    if (this.traces.length <= 1) {\r\n      console.error('Wont remove a single trace', this);\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < this.traces.length; i++) {\r\n      if (this.trace === this.traces[i]) {\r\n        this.traces.splice(i, 1);\r\n        if (i >= this.traces.length) {\r\n          i = this.traces.length - 1;\r\n        }\r\n        this.ctrl.onConfigChanged();\r\n        this.ctrl._updateTraceData(true);\r\n        this.selectTrace(i);\r\n        this.ctrl.refresh();\r\n        return;\r\n      }\r\n    }\r\n\r\n    console.error('Could not find', this);\r\n  }\r\n\r\n  static createTraceName(idx: number) {\r\n    return 'Trace ' + (idx + 1);\r\n  }\r\n\r\n  //-----------------------------------------------------------------------\r\n  // SERIES\r\n  //-----------------------------------------------------------------------\r\n\r\n  getSeriesSegs(withRemove = false): Promise<any[]> {\r\n    return new Promise((resolve, reject) => {\r\n      let series: any[] = [];\r\n      if (false && withRemove) {\r\n        series.push(\r\n          this.ctrl.uiSegmentSrv.newSegment({\r\n            fake: false,\r\n            value: null,\r\n            html: '<i class=\"fa fa-cross \"></i> Remove',\r\n            series: null,\r\n            cssClass: 'query-part',\r\n          })\r\n        );\r\n      }\r\n      this.ctrl.series.forEach(s => {\r\n        series.push(\r\n          this.ctrl.uiSegmentSrv.newSegment({\r\n            value: s.getRelativeKey(),\r\n            series: s,\r\n          })\r\n        );\r\n      });\r\n      console.log('GET Series', series, this.ctrl.series);\r\n      resolve(series);\r\n    });\r\n  }\r\n\r\n  onAxisSeriesChanged(axis: AxisInfo) {\r\n    console.log('CHANGE', axis);\r\n    this.trace.mapping[axis.property] = axis.segment.value;\r\n    this.onConfigChanged();\r\n  }\r\n\r\n  onTextMetricChanged() {\r\n    const seg = this.mapping.text;\r\n    this.trace.mapping.text = seg.value;\r\n    this.onConfigChanged();\r\n  }\r\n\r\n  onColorChanged() {\r\n    const seg = this.mapping.color;\r\n    this.trace.mapping.color = seg.value;\r\n    this.onConfigChanged();\r\n  }\r\n\r\n  //-----------------------------------------------------------------------\r\n  // SYMBOLS\r\n  //-----------------------------------------------------------------------\r\n\r\n  onSymbolChanged() {\r\n    this.trace.settings.marker.symbol = this.symbol.value;\r\n    this.onConfigChanged();\r\n  }\r\n\r\n  getSymbolSegs(): Promise<any[]> {\r\n    return new Promise((resolve, reject) => {\r\n      let txt = [\r\n        'circle',\r\n        'circle-open',\r\n        'circle-dot',\r\n        'circle-open-dot',\r\n        'square',\r\n        'square-open',\r\n        'square-dot',\r\n        'square-open-dot',\r\n        'diamond',\r\n        'diamond-open',\r\n        'diamond-dot',\r\n        'diamond-open-dot',\r\n        'cross',\r\n        'cross-open',\r\n        'cross-dot',\r\n        'cross-open-dot',\r\n        'x',\r\n        'x-open',\r\n        'x-dot',\r\n        'x-open-dot',\r\n        'triangle-up',\r\n        'triangle-up-open',\r\n        'triangle-up-dot',\r\n        'triangle-up-open-dot',\r\n        'triangle-down',\r\n        'triangle-down-open',\r\n        'triangle-down-dot',\r\n        'triangle-down-open-dot',\r\n        'triangle-left',\r\n        'triangle-left-open',\r\n        'triangle-left-dot',\r\n        'triangle-left-open-dot',\r\n        'triangle-right',\r\n        'triangle-right-open',\r\n        'triangle-right-dot',\r\n        'triangle-right-open-dot',\r\n        'triangle-ne',\r\n        'triangle-ne-open',\r\n        'triangle-ne-dot',\r\n        'triangle-ne-open-dot',\r\n        'triangle-se',\r\n        'triangle-se-open',\r\n        'triangle-se-dot',\r\n        'triangle-se-open-dot',\r\n        'triangle-sw',\r\n        'triangle-sw-open',\r\n        'triangle-sw-dot',\r\n        'triangle-sw-open-dot',\r\n        'triangle-nw',\r\n        'triangle-nw-open',\r\n        'triangle-nw-dot',\r\n        'triangle-nw-open-dot',\r\n        'pentagon',\r\n        'pentagon-open',\r\n        'pentagon-dot',\r\n        'pentagon-open-dot',\r\n        'hexagon',\r\n        'hexagon-open',\r\n        'hexagon-dot',\r\n        'hexagon-open-dot',\r\n        'hexagon2',\r\n        'hexagon2-open',\r\n        'hexagon2-dot',\r\n        'hexagon2-open-dot',\r\n        'octagon',\r\n        'octagon-open',\r\n        'octagon-dot',\r\n        'octagon-open-dot',\r\n        'star',\r\n        'star-open',\r\n        'star-dot',\r\n        'star-open-dot',\r\n        'hexagram',\r\n        'hexagram-open',\r\n        'hexagram-dot',\r\n        'hexagram-open-dot',\r\n        'star-triangle-up',\r\n        'star-triangle-up-open',\r\n        'star-triangle-up-dot',\r\n        'star-triangle-up-open-dot',\r\n        'star-triangle-down',\r\n        'star-triangle-down-open',\r\n        'star-triangle-down-dot',\r\n        'star-triangle-down-open-dot',\r\n        'star-square',\r\n        'star-square-open',\r\n        'star-square-dot',\r\n        'star-square-open-dot',\r\n        'star-diamond',\r\n        'star-diamond-open',\r\n        'star-diamond-dot',\r\n        'star-diamond-open-dot',\r\n        'diamond-tall',\r\n        'diamond-tall-open',\r\n        'diamond-tall-dot',\r\n        'diamond-tall-open-dot',\r\n        'diamond-wide',\r\n        'diamond-wide-open',\r\n        'diamond-wide-dot',\r\n        'diamond-wide-open-dot',\r\n        'hourglass',\r\n        'hourglass-open',\r\n        'bowtie',\r\n        'bowtie-open',\r\n        'circle-cross',\r\n        'circle-cross-open',\r\n        'circle-x',\r\n        'circle-x-open',\r\n        'square-cross',\r\n        'square-cross-open',\r\n        'square-x',\r\n        'square-x-open',\r\n        'diamond-cross',\r\n        'diamond-cross-open',\r\n        'diamond-x',\r\n        'diamond-x-open',\r\n        'cross-thin',\r\n        'cross-thin-open',\r\n        'x-thin',\r\n        'x-thin-open',\r\n        'asterisk',\r\n        'asterisk-open',\r\n        'hash',\r\n        'hash-open',\r\n        'hash-dot',\r\n        'hash-open-dot',\r\n        'y-up',\r\n        'y-up-open',\r\n        'y-down',\r\n        'y-down-open',\r\n        'y-left',\r\n        'y-left-open',\r\n        'y-right',\r\n        'y-right-open',\r\n        'line-ew',\r\n        'line-ew-open',\r\n        'line-ns',\r\n        'line-ns-open',\r\n        'line-ne',\r\n        'line-ne-open',\r\n        'line-nw',\r\n        'line-nw-open',\r\n      ];\r\n\r\n      let segs: any[] = [];\r\n      _.forEach(txt, val => {\r\n        segs.push(this.ctrl.uiSegmentSrv.newSegment(val));\r\n      });\r\n      resolve(segs);\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}